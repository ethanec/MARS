#The rate in Hz at which to run the control loop and send velocity commands to the base

TrajectoryPlannerROS:
  max_vel_x: 0.2
  min_vel_x: 0.1
  max_rotational_vel: 0.8 
  min_in_place_rotational_vel: 0.3
  escape_vel: -0.2

  acc_lim_th: 3.2
  acc_lim_x: 2.5
  acc_lim_y: 2.5

  holonomic_robot: false 
  
  # Whether the gdist_scale and pdist_scale parameters should assume that goal_distance
  # and path_distance are expressed in units of meters or cells.  Cells are assumed by default
  meter_scoring: false
  
  
  # Whether or not to publish the cost grid that the planner will use when planning. 
  # When true, a sensor_msgs/PointCloud2 will be available on the ~<name>/cost_cloud topic. 
  # Each point cloud represents the cost grid and has a field for each individual scoring function
  # component as well as the overall cost for each cell, taking the scoring parameters into accoun
  publish_cost_grid_pc: false
  
  # The weighting for how much the controller should attempt to avoid obstacles, def = 0.01
  occdist_scale: 0.02 
  
  # Whether to use the Dynamic Window Approach (DWA)_ or whether to use Trajectory Rollout 
  # (NOTE: In our experience DWA worked as well as Trajectory Rollout and is computationally less expensive.
  # It is possible that robots with extremely poor acceleration limits could gain from running Trajectory Rollout, 
  # but we recommend trying DWA first.)
  dwa: true
